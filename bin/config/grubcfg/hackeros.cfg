
function setenvpath { set "$1"="$2"; export "$1"; }

search.fs_label REFIND isodir

setenvpath images "/ISO"
setenvpath imagess "($isodir)/ISO"

configfile "${prefix}/smartfinn.cfg"

function _generate_entries {
    for file in ${images}/*.iso ${images}/*.ISO; do
        if [ ! -f "${file}" ]; then continue; fi

        regexp --set=1:filepath '(/.+)$' "$file"
        regexp --set=1:filename '^.*/(.+)$' "$file"

        if regexp "(archstrike|ArchStrike)" "${filename}"; then
            _entry_archstrike ${filename} ${filepath}
        elif regexp "backbox" "${filename}"; then
            _entry_backbox ${filename} ${filepath}
        elif regexp "blackarch" "${filename}"; then
            _entry_blackarch ${filename} ${filepath}
        elif regexp "bugtraq" "${filename}"; then
            _entry_bugtraq ${filename} ${filepath}
        #elif regexp "caine" "${filename}"; then
        #    _entry_caine ${filename} ${filepath}
        elif regexp "cyborg" "${filename}"; then
            _entry_cyborg ${filename} ${filepath}
        elif regexp "deftZ" "${filename}"; then
            _entry_deftz ${filename} ${filepath}
        elif regexp "deft" "${filename}"; then
            _entry_deft ${filename} ${filepath}
        elif regexp "kali" "${filename}"; then
            _entry_kali ${filename} ${filepath}
        elif regexp "(Ophcrack|ophcrack)" "${filename}"; then
            _entry_ophcrack ${filename} ${filepath}
        elif regexp "(Parrot|parrot)" "${filename}"; then
            _entry_parrot ${filename} ${filepath}
        elif regexp "tails" "${filename}"; then
            _entry_tails ${filename} ${filepath}
        elif regexp "(septor|Septor)" "${filename}"; then
            _entry_septor ${filename} ${filepath}
        elif regexp "wnl8" "${filename}"; then
            _entry_weaknet ${filename} ${filepath}
        elif regexp "wifislax" "${filename}"; then
            _entry_wifislax ${filename} ${filepath}
        fi
    done
}

function _generate_entriess {
    for file in ${imagess}/*.iso ${imagess}/*.ISO; do
        if [ ! -f "${file}" ]; then continue; fi

        regexp --set=1:filepath '(/.+)$' "$file"
        regexp --set=1:filename '^.*/(.+)$' "$file"

        if regexp "(Fedora-Security)" "${filename}"; then
            _entry_fedora ${filename} ${filepath}
        elif regexp "nst-" "${filename}"; then
            _entry_nst ${filename} ${filepath}
        fi
    done
}


if [ -e "/ISO" ]; then
    submenu "Boot Linux live ISO via partnew method" --class icon-memtest {
        ListISOBoot
    }
fi

_generate_entries
_generate_entriess

if [ -e "/ISO_Extract/Bugtraq/initrd.img" ]; then
    menuentry "Bugtraq-II Black Widow (extracted)" --class bugtraq {
        echo "User: bugtraq"
        echo "Password: 123456"
        set gfxpayload=keep
        linux /ISO_Extract/Bugtraq/vmlinuz noprompt live-media-path=/ISO_Extract/Bugtraq initrd=/ISO_Extract/Bugtraq/initrd.img boot=live config
        initrd /ISO_Extract/Bugtraq/initrd.img
    }
fi

if [ -e "/ISO_Extract/Caine/vmlinuz" ]; then
    menuentry "CAINE Infinity (extracted)" --class caine {
        set gfxpayload=keep
        linux /ISO_Extract/Caine/vmlinuz cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Caine initrd=/ISO_Extract/Caine/initrd.gz boot=casper
        initrd /ISO_Extract/Caine/initrd.gz
    }
    menuentry "CAINE Infinity (compatibility mode - extracted)" --class caine {
        set gfxpayload=keep
        linux /ISO_Extract/Caine/vmlinuz cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Caine initrd=/ISO_Extract/Caine/initrd.gz boot=casper xforcevesa noveau.modeset=0 ramdisk_size=1048576 root=/dev/ram rw noapic noacpi nosplash irqpoll --
        initrd /ISO_Extract/Caine/initrd.gz
    }
    menuentry "CAINE Infinity (Compatibility VESA mode - extracted)" --class caine {
        set gfxpayload=keep
        linux /ISO_Extract/Caine/vmlinuz cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Caine initrd=/ISO_Extract/Caine/initrd.gz boot=casper xforcevesa b43.blacklist=yes nomodeset ramdisk_size=1048576 root=/dev/ram rw noapic noacpi nosplash irqpoll --
        initrd /ISO_Extract/Caine/initrd.gz
    }
    menuentry "CAINE Infinity (To Ram - extracted)" --class caine {
        set gfxpayload=keep
        linux /ISO_Extract/Caine/vmlinuz cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Caine initrd=/ISO_Extract/Caine/initrd.gz boot=casper xtoram nomdmonddf nomdmonisw ramdisk_size=1048576 root=/dev/ram rw noapic noacpi nosplash irqpoll --
        initrd /ISO_Extract/Caine/initrd.gz
    }
fi

if [ -e "/ISO_Extract/Cyborg-hawk/initrd.gz" ]; then
    menuentry "Cyborg Hawk linux live (extracted)" --class cyborg {
        echo "User: cyborg"
        echo "Password: toor"
        set gfxpayload=keep
        linux /ISO_Extract/Cyborg-hawk/vmlinuz boot=casper cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Cyborg-hawk/ initrd=/ISO_Extract/Cyborg-hawk/initrd.gz
        initrd /ISO_Extract/Cyborg-hawk/initrd.gz
    }
fi

if [ -e "/ISO_Extract/LionSec/vmlinuz" ]; then
    menuentry "LionSec Linux 5.0 (extracted)" --class lionsec {
        set gfxpayload=keep
        linux /ISO_Extract/LionSec/vmlinuz boot=casper cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/LionSec/ initrd=/ISO_Extract/LionSec/initrd.gz
        initrd /ISO_Extract/LionSec/initrd.gz
    }
fi

if [ -e "/ISO_Extract/Matriux/vmlinuz" ]; then
    menuentry "Matriux Leandros Linux (extracted)" --class matriux {
        echo "Password: toor"
        set gfxpayload=keep
        linux /ISO_Extract/Matriux/vmlinuz boot=live config cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Matriux/ initrd=/ISO_Extract/Matriux/initrd.img
        initrd /ISO_Extract/Matriux/initrd.img
    }
fi

if [ -e "/ISO_Extract/Discreete/vmlinuz" ]; then
    menuentry "Discreete Linux (extracted)" --class discreete {
        linux /ISO_Extract/Discreete/vmlinuz boot=live noprompt live-media-path=/ISO_Extract/Discreete cdrom-detect/try-usb=true noconfig=sudo components hostname=discreete username=somebody nopersistent video.use_bios_initial_backlight=0 locales=en_US.UTF-8 keyboard-layouts=en
        initrd /ISO_Extract/Discreete/initrd.img
    }
fi

if [ -e "/ISO_Extract/Subgraph-os/vmlinuz" ]; then
    menuentry "Subgraph OS Linux (extracted)" --class subgraph {
        linux /ISO_Extract/Subgraph-os/vmlinuz boot=live noprompt live-media-path=/ISO_Extract/Subgraph-os cdrom-detect/try-usb=true noconfig=sudo username=user user-fullname=User hostname=subgraph union=overlay apparmor=1 security=apparmor
        initrd /ISO_Extract/Subgraph-os/initrd.img
    }
fi

if [ -e "/ISO_Extract/Weakerthan/vmlinuz" ]; then
    menuentry "Weakerthan 7 Linux (extracted)" --class weakerthan {
        set gfxpayload=keep
        linux /ISO_Extract/Weakerthan/vmlinuz boot=live cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/Weakerthan/
        initrd /ISO_Extract/Weakerthan/initrd
    }
fi

if [ -e "/ISO_Extract/WeakNet/vmlinuz" ]; then
    menuentry "WeakNet LINUX 8 (extracted)" --class weakerthan {
        echo "User: root"
        echo "Password: weaknet"
        set gfxpayload=keep
        linux /ISO_Extract/WeakNet/vmlinuz boot=live cdrom-detect/try-usb=true noprompt floppy.allowed_drive_mask=0 ignore_uuid live-media-path=/ISO_Extract/WeakNet/
        initrd /ISO_Extract/WeakNet/initrd
    }
fi

if [ "${grub_platform}" == "efi" ]; then
    set _UEFI_ARCH="${grub_cpu}"
    if [ "${grub_cpu}" == "x86_64" ]; then
        menuentry "Konboot EFI 64" --class lock {
            search --no-floppy --file --set=root /EFI/boot/konbootX64.efi
            chainloader /EFI/boot/konbootX64.efi
        }
    fi
fi
if [ "${grub_platform}" == "efi" ]; then
    set _UEFI_ARCH="${grub_cpu}"
    if [ "${grub_cpu}" == "i386" ]; then
        menuentry "Konboot EFI IA32" --class lock {
            search --no-floppy --file --set=root /EFI/boot/konbootIA32.efi
            chainloader /EFI/boot/konbootIA32.efi
        }
    fi
fi
if [ "${grub_platform}" == "pc" ]; then
    menuentry "Konboot" --class lock {
        echo "%_config0003_%"
        search --file /boot/memdisk --set=root
        linux16 ^($root^)/boot/memdisk floppy
        initrd16 /ISO/konboot.img
    }
fi

menuentry "return to main menu" --class arrow-left {
    echo "return to main menu"
    configfile "${prefix}/main.cfg"
}
