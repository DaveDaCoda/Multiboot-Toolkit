
# =======================
# COMMON FUNCTION
# =======================

function loopbackcfg {
    set iso_path=$1
    export iso_path
    search --set=root --file $iso_path
    probe -u -s rootuuid $root
    export rootuuid
    loopback loop $iso_path
    root=(loop)
    configfile /boot/grub/loopback.cfg
    loopback --delete loop
}

function loopbackArch {
    set iso_path=$1
    loopback loop $iso_path

    probe -l (loop) --set=iso_label
    probe -u (loop) --set=iso_uuid

    # This script was borrowed from grub2-filemanager - thanks a1ive
    if test -f (loop)/$2/boot/x86_64/vmlinuz* -a -f (loop)/$2/boot/x86_64/archiso.img; then
        set vmlinuz_img="(loop)/$2/boot/x86_64/vmlinuz*"
        set initrd_img="(loop)/$2/boot/x86_64/archiso.img"
        set kcmdline="archisodevice=/dev/loop0 earlymodules=loop"
        set linux_extra="img_dev=/dev/disk/by-uuid/$dev_uuid img_loop=$iso_path archisolabel=iso_label"
    fi
    if test -f (loop)/boot/vmlinuz_x86_64 -a -f (loop)/boot/initramfs_x86_64.img; then
        set vmlinuz_img="(loop)/boot/vmlinuz_x86_64"
        set initrd_img="(loop)/boot/initramfs_x86_64.img"
        set kcmdline=""
        set linux_extra="iso_loop_dev=/dev/disk/by-uuid/$dev_uuid iso_loop_path=$iso_path"
    fi
    if test -f (loop)/$2/boot/vmlinuz* -a -f (loop)/$2/boot/archiso.img; then
        set vmlinuz_img="(loop)/$2/boot/vmlinuz*"
        set initrd_img="(loop)/$2/boot/archiso.img"
        set kcmdline="archisobasedir=$2 earlymodules=loop modules-load=loop"
    fi
    if test -f (loop)/$2/boot/intel_ucode.img; then
        set initrd_img="(loop)/$2/boot/intel_ucode.img ${initrd_img}"
    fi
    # --------------------------------------------------------------

    linux $vmlinuz_img $kcmdline $3 $linux_extra
    initrd $initrd_img
}

function loopbackDebian {
    set iso_path=$1
    loopback loop $iso_path

    if test -f (loop)/live/vmlinuz* -a -f (loop)/live/initrd*; then
        set vmlinuz_img="(loop)/live/vmlinuz*"
        set initrd_img="(loop)/live/initrd*"
        set kcmdline="boot=live components"
        set linux_extra="findiso=$iso_path"
    fi

    linux $vmlinuz_img $kcmdline $2 $linux_extra
    initrd $initrd_img
}

function loopbackUbuntu {
    set iso_path=$1
    loopback loop $iso_path

    if test -f (loop)/casper/vmlinuz* -a -f (loop)/casper/initrd*; then
        set vmlinuz_img="(loop)/casper/vmlinuz*"
        set initrd_img="(loop)/casper/initrd*"
        set kcmdline="boot=casper"
        set linux_extra="iso-scan/filename=$iso_path"
    fi

    linux $vmlinuz_img $kcmdline $2 $linux_extra
    initrd $initrd_img
}

function getdevnum {
    for i in 1 2 3 4 5 6 ; do
        if [ x$root = xhd0,msdos$i ]; then
            devnum=$i
            break
        fi
    done
    
    k="" ; for x in 0,1 1,2 2,3 3,4 4,5 5,6 ; do 
        regexp --set=1:k "([0-9]+),${devnum}" "${x}"
        if [ "$k" != "" ] ; then 
            devnum=$k
            break
        fi
    done
}

function isoPartnew {
    if [ -e (hd0,gpt1)/* ]; then
        echo -----------------------------------------------------------------------
        echo 
        echo Boot live ISO by using the partnew method does not support on GPT disk.
        echo Convert your bootable device to MBR disk up to 3 partitions to use.
        echo 
        echo Press any key to exit!
        echo -----------------------------------------------------------------------
        getkey key
    else
        if [ -e (hd0,msdos4)/* ]; then
            echo ---------------------------------------------------------------------
            echo WARNING!
            echo 
            echo This feature disabled because it will erase ALL data from partition 4
            echo To use this feature please make sure your device up to 3 partitions
            echo 
            echo Press any key to exit!
            echo ---------------------------------------------------------------------
            getkey key
        else
            partnew --type=0x00 --file=($root)/ISO/$1 hd0 4
            if [ "${grub_platform}" == "pc" ]; then
                getdevnum
                g4dcmd="find --set-root /usbdrive.tag;/map nomem cd (hd0,$devnum)/ISO/$1"
                linux $prefix/grub.exe --config-file=$g4dcmd; boot
            else
                map ($root)/ISO/$1
            fi
        fi
    fi
}

function GetHotkey {
    if [ "$k" != "." ]; then
        set hotkeys="_0123456789adfghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`=,."
        regexp -s k "${k}(.)" "$hotkeys"
    fi
}

function ListISOBoot {
    set ISOmessage="Getting the list of files in \"/ISO\". Please wait..."
    set noISO="Please copy all your ISO files to the \"/ISO\" folder first."
    echo "${ISOmessage}"
    set k="_"
    for file in /ISO/*.iso; do
        if ! test -f "$file"; then continue; fi
        regexp -s filename "/ISO/(.*)" "$file"
        if [ -z "$havefile" ]; then set havefile="1"; fi
        GetHotkey
        menuentry "[ ${k} ] ${filename}" "$filename" --hotkey="${k}" --class Doc-System-UBT-icon {
            isoPartnew ${2}
        }
    done
    if [ -z "$havefile" ]; then
        esc 2 "${noISO}"
    else
        unset havefile
        source ${prefix}/linux.cfg
    fi
    unset filename
}

function extraMenu {
    submenu "Boot ISO with Loopback Method" --id isopath $2 --id extra $3 --class icon-tool2 {
        loopbackDebian $2 $3
    }
    submenu "Boot ISO with Partnew Method" --id isoname $1 --class icon-ads {
        isoPartnew $2
    }
    submenu "return to previous menu" --class arrow-left {
        configfile "${prefix}/hackeros.cfg"
    }
}


# =======================
# ENTRIES MENU FUNCTION
# =======================

function _entry_alpine {
    submenu $1 --id alpine $2 --class alpine {
        set iso_path=$2
        loopback loop $iso_path
        set root=loop
        linux /boot/vmlinuz-vanilla iso-scan/filename=$iso_path alpine_dev=usbdisk:vfat BOOT_IMAGE=/boot/vmlinuz-vanilla modules=loop,squashfs,sd-mod,usb-storage nomodeset initrd=/boot/initramfs-vanilla
        initrd /boot/initramfs-vanilla
    }
    return 0
}

function _entry_android {
    submenu $1 --id android $2 --class android {
        loopbackcfg $2
    }
    return 0
}

function _entry_antergos {
    submenu $1 --id antergos $2 --class antergos {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_antix {
    menuentry "$1 - Legacy mode only" --id antix $2 --class antix {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/antiX/vmlinuz nocheckfs disable=lx loop.max_loop=255 log_buf_len=128K nomodeset failsafe noxorg fromiso=$iso_path
        initrd (loop)/antiX/initrd.gz
    }
    return 0
}

function _entry_apricity_os {
    submenu $1 --id apricity_os $2 --class apricity {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_archlabs {
    submenu $1 --id archlabs $2 --class arch {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_archlinux {
    submenu $1 --id archlinux $2 --class arch {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_archman {
    submenu $1 --id archman $2 --class arch {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_archstrike {
    submenu $1 --id archstrike $2 --class archstrike {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_arco {
    submenu $1 --id arco $2 --class arch {
        loopbackArch $2 arch
    }
    return 0
}

function _entry_backbox {
    submenu $1 --id backbox $2 --class backbox {
        loopbackcfg $2
    }
    return 0
}

function _entry_bbqlinux {
    submenu $1 --id bbqlinux $2 --class bbqlinux {
        loopbackArch $2 bbqlinux
    }
    return 0
}

function _entry_blackarch {
    submenu $1 --id blackarch $2 --class arch {
        echo "User: root"
        echo "Password: blackarch"
        sleep 2
        loopbackArch $2 blackarch
    }
    return 0
}

function _entry_bluestar {
    submenu $1 --id bluestar $2 --class arch {
        loopbackArch $2 arch "ipv6.disable=1 disablehooks=v86d,915resolution,gma3600 modprobe.blacklist=uvesafb"
    }
    return 0
}

function _entry_bodhi {
    submenu $1 --id bodhi $2 --class bodhi {
        loopbackcfg $2
    }
    return 0
}

function _entry_bugtraq {
    submenu $1 --id bugtraq $2 --class bugtraq {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/casper/vmlinuz iso-scan/filename=$iso_path file=/cdrom/preseed/custom.seed boot=casper quiet splash --
        initrd (loop)/casper/initrd.gz
    }
    return 0
}

function _entry_caine {
    submenu $1 --id caine $2 --class caine {
        #temporary it only works in extracted mode
        loopbackUbuntu $2
    }
    return 0
}

function _entry_centos {
    submenu $1 --id centos $2 --class centos {
        set iso_path=$2
        loopback loop $iso_path
        linuxefi (loop)/images/pxeboot/vmlinuz inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 iso-scan/filename=$iso_path
        initrdefi (loop)/images/pxeboot/initrd.img
    }
    return 0
}

function _entry_cosmic {
    submenu $1 --id cosmic $2 --class ubuntu {
        loopbackcfg $2
    }
    return 0
}

function _entry_cyborg {
    submenu $1 --id cyborg $2 --class cyborg {
        loopbackDebian $2 "text username=root hostname=cyborg"
    }
    return 0
}

function _entry_debian {
    submenu $1 --id debian $2 --class debian {
        loopbackcfg $2
    }
    return 0
}

function _entry_deepin_live {
    submenu $1 --id deepin_live $2 --class deepin {
        loopbackDebian $2 config
    }
    return 0
}

function _entry_deepin {
    submenu $1 --id deepin $2 --class deepin {
        set iso_path=$2
        export iso_path
        loopback loop $iso_path
        linux (loop)/live/vmlinuz.efi boot=live union=overlay livecd-installer locale=zh_EN findiso=$iso_path config
        initrd (loop)/live/initrd.lz
    }
    return 0
}

function _entry_deft {
    submenu $1 --id deft $2 --class deft {
        loopbackUbuntu $2
    }
    return 0
}

function _entry_deftz {
    submenu $1 --id deftz $2 --class deft {
        loopbackcfg $2
    }
    return 0
}

function _entry_elementaryos {
    submenu $1 --id elementaryos $2 --class elementary {
        loopbackcfg $2
    }
    return 0
}

function _entry_fedora_security {
    submenu $1 --id fedora_security $2 --class fedora {
        set iso_path=$2
        loopback loop "(${isodir})$iso_path"
        probe -u (loop) --set=loopuuid
        set id=UUID=$loopuuid
        if [ "${grub_platform}" == "efi" ]; then
           linuxefi (loop)/images/pxeboot/vmlinuz root=live:$id rd.live.image iso-scan/filename=$iso_path
           initrdefi (loop)/images/pxeboot/initrd.img
        fi
        if [ "${grub_platform}" == "pc" ]; then
           linux (loop)/isolinux/vmlinuz root=live:$id rootfstype=auto ro rd.live.image xquiet nosplash  rhgb rd.luks=0 rd.md=0 rd.dm=0 nomodeset iso-scan/filename=$iso_path
           initrd (loop)/isolinux/initrd.img
        fi
    }
    return 0
}

function _entry_fedora {
    submenu $1 --id fedora $2 --class fedora {
        set iso_path=$2
        loopback loop "($isodir)$iso_path"
        probe -u (loop) --set=loopuuid
        set id=UUID=$loopuuid
        linux (loop)/isolinux/vmlinuz root=live:$id rootfstype=auto ro rd.live.image xquiet nosplash  rhgb rd.luks=0 rd.md=0 rd.dm=0 nomodeset iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd.img
    }
    return 0
}

function _entry_gecko {
    submenu $1 --id gecko $2 --class opensuse {
        set iso_path=$2
        set btrfs_relative_path="y"
        export btrfs_relative_path
        loopback loop "${iso_path}"
        search --file --set=root /boot/0x197d2c94
        linux (loop)/boot/x86_64/loader/linux apparmor=0 root=live:CDLABEL=GeckoLinux_STATIC_Plasma rd.live.image rd.live.overlay.persistent rd.live.overlay.cowfs=ext4 iso-scan/filename=${iso_path}
        initrd (loop)/boot/x86_64/loader/initrd
    }
    return 0
}

function _entry_avl {
    submenu $1 --id avl $2 --class avl {
        loopbackDebian $2 "threadirqs transparent_hugepage=never noresume"
    }
    return 0
}

function _entry_kali {
    submenu $1 --id kali $2 --class kali {
        extraMenu $1 $2 "noconfig=sudo username=root hostname=kali noswap noautomount"
    }
    return 0
}

function _entry_linux_lite {
    submenu $1 --id linux_lite $2 --class lite {
        loopbackcfg $2
    }
    return 0
}

function _entry_devuan {
    submenu $1 --id devuan $2 --class devuan {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/live/vmlinuz boot=live username=devuan iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img (loop)/live/filesystem.squashfs
    }
    return 0
}

function _entry_discreete {
    submenu $1 --id discreete $2 --class discreete {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/live/vmlinuz boot=live components hostname=discreete username=somebody locales=en_US.UTF-8 keyboard-layouts=us iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_kodachi {
    submenu $1 --id kodachi $2 --class kodachi {
        loopbackcfg $2
    }
    return 0
}

function _entry_kaos {
    submenu $1 --id kaos $2 --class arch {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/kdeos/boot/x86_64/kdeosiso img_dev=/dev/disk/by-label/${ROOT_LABEL} img_loop=$iso_path kdeosisobasedir=kdeos archisodevice=/dev/loop0 kdeosisolabel=KAOS_20190425 xdriver=no nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 nonfree=no
        initrd (loop)/kdeos/boot/x86_64/kdeosiso.img
    }
    return 0
}

function _entry_linuxbbq {
    submenu $1 --id linuxbbq $2 --class bbqlinux {
        loopbackArch $2 bbqlinux
    }
    return 0
}

function _entry_linuxmint {
    submenu $1 --id linuxmint $2 --class linuxmint {
        loopbackcfg $2
    }
    return 0
}

function _entry_lxle {
    submenu $1 --id lxle $2 --class lxle {
        loopbackcfg $2
    }
    return 0
}

function _entry_manjaro {
    submenu $1 --id manjaro $2 --class manjaro {
        loopbackcfg $2
    }
    return 0
}

function _entry_memdisk {
    submenu $1 --id memdisk $2 --class memdisk {
        loopbackcfg $2
    }
    return 0
}

function _entry_mx {
    submenu $1 --id mx $2 --class mx {
        set iso_path=$2
        set bootparms="from=all quiet"
        search -f $iso_path --set=root
        loopback loop $iso_path
        linux (loop)/antiX/vmlinuz fromiso=$iso_path $bootparms
        initrd (loop)/antiX/initrd.gz
    }
    return 0
}

function _entry_neon {
    submenu $1 --id neon $2 --class neon {
        set iso_path=$2
        loopback loop $iso_path
        load_video
        set gfxpayload=keep
        linux (loop)/casper/vmlinuz  file=/cdrom/preseed/kubuntu.seed boot=casper maybe-ubiquity iso-scan/filename=${iso_path}
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_neptune {
    submenu $1 --id neptune $2 --class neptune {
        loopbackcfg $2
    }
    return 0
}

function _entry_netrunner {
    submenu $1 --id netrunner $2 --class netrunner {
        loopbackcfg $2
    }
    return 0
}

function _entry_nst {
    submenu $1 --id nst $2 --class nst {
        set iso_path=$2
        loopback loop "($isodir)$iso_path"
        probe -u (loop) --set=loopuuid
        set id=UUID=$loopuuid
        linux (loop)/isolinux/vmlinuz0 root=live:$id rootfstype=auto ro rd.live.image xquiet nosplash  rhgb rd.luks=0 rd.md=0 rd.dm=0 nomodeset iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd0.img
    }
    return 0
}

function _entry_opensuse_leap {
    submenu $1 --id opensuse $2 --class opensuse {
        set iso_path=$2
        loopback loop "($isodir)$iso_path"
        linux (loop)/boot/x86_64/loader/linux root=live:CDLABEL=openSUSE_Leap_15.0_GNOME_Live rd.live.image rd.live.overlay.persistent rd.live.overlay.cowfs=ext4 iso-scan/filename=$iso_path
        initrd (loop)/boot/x86_64/loader/initrd
    }
    return 0
}
function _entry_opensuse_tumblew {
    submenu $1 --id opensuse $2 --class opensuse {
        set iso_path=$2
        loopback loop "($isodir)$iso_path"
        linux (loop)/boot/x86_64/loader/linux root=live:CDLABEL=openSUSE_Tumbleweed_KDE_Live rd.live.image rd.live.overlay.persistent rd.live.overlay.cowfs=ext4 iso-scan/filename=$iso_path
        initrd (loop)/boot/x86_64/loader/initrd
    }
    return 0
}

function _entry_ophcrack {
    submenu $1 --id ophcrack $2 --class ophcrack {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/bzImage rw root=/dev/null vga=normal lang=C kmap=us screen=1024x768x16 autologin
        initrd (loop)/boot/rootfs.gz
    }
    return 0
}

function _entry_parrot {
    submenu $1 --id parrot $2 --class parrot {
        extraMenu $1 $2 "hostname=parrot noautomount"
    }
    return 0
}

function _entry_pclinux {
    submenu $1 --id pclinux $2 --class pclinux {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/isolinux/vmlinuz livecd=livecd root=/dev/rd/3 vga=788 keyb=us findiso=$iso_path
        initrd (loop)/isolinux/initrd.gz
    }
    return 0
}

function _entry_slackware {
    submenu $1 --id slackware $2 --class slackware {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/kernels/huge.s/bzImage vga=normal load_ramdisk=1 prompt_ramdisk=0 ro printk.time=0 nomodeset SLACK_KERNEL=huge.s iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd.img
    }
    return 0
}

function _entry_pepper {
    submenu $1 --id pepper $2 --class pepper {
        loopbackcfg $2
    }
    return 0
}

function _entry_pentoo {
    submenu $1 --id pentoo $2 --class pentoo {
        set iso_path=$2
        loopback loop $iso_path
        bootoptions="root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot vga=791 isoboot=$iso_path"
        linux (loop)/isolinux/pentoo $bootoptions
        initrd (loop)/isolinux/pentoo.igz
    }
    return 0
}

function _entry_pinguyos {
    submenu $1 --id pinguyos $2 --class pinguy {
        loopbackcfg $2
    }
    return 0
}

function _entry_pop {
    submenu $1 --id pop $2 --class pop {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/casper_pop-os_19.04_amd64_intel_debug_25/vmlinuz.efi boot=casper live-media-path=/casper_pop-os_19.04_amd64_intel_debug_25 hostname=pop-os username=pop-os iso-scan/filename=$iso_path
        initrd (loop)/casper_pop-os_19.04_amd64_intel_debug_25/initrd.gz
    }
    return 0
}

function _entry_porteus {
    submenu $1 --id porteus $2 --class porteus {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/syslinux/vmlinuz changes=/porteus cliexec=\$(zkp)/initthis.cfg delay=4 kmap=us vga=791 utc iso-scan/filename=$iso_path
        initrd (loop)/boot/syslinux/initrd.xz
    }
    return 0
}

function _entry_pup {
    submenu $1 --id pup $2 --class linux {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/vmlinuz pfix=ram iso-scan/filename=$iso_path
        initrd (loop)/initrd.gz
    }
    return 0
}

function _entry_q4os {
    submenu $1 --id q4os $2 --class q4os {
        loopbackcfg $2
    }
    return 0
}

function _entry_qubes {
    submenu $1 --id qubes $2 --class qubes {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/isolinux/vmlinuz inst.stage2=hd:LABEL=Qubes-R4.0-x86_64 xdriver=vesa nomodeset iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd.img (loop)/isolinux/xen.gz
    }
    return 0
}

function _entry_react {
    submenu $1 --id react $2 --class react {
        set iso_path=$2
        loopback loop $iso_path
        root=(loop)
        multiboot (loop)/loader/freeldr.sys
    }
    return 0
}

function _entry_redcore {
    menuentry "$1 - Legacy mode only" --id redcore $2 --class redcore {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/vmlinuz rd.live.image root=CDLABEL=REDCORE rootfstype=auto vconsole.keymap=us rd.locale.LANG=en_US.utf8 modprobe.blacklist=vboxvideo loglevel=1 console=tty0 rd.luks=0 rd.lvm=0 rd.md=0 rd.dm=0 iso-scan/filename=$iso_path
        initrd (loop)/boot/initrd
    }
    return 0
}

function _entry_sabayon {
    submenu $1 --id sabayon $2 --class sabayon {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/sabayon root=/dev/ram0 overlayfs cdroot root=live:UUID=5c403dad00049b51 rootfstype=auto rd.live.overlay.overlayfs rd.live.image isoboot=$iso_path
        initrd (loop)/boot/sabayon.igz
    }
    return 0
}

function _entry_slacko {
    submenu $1 --id slacko $2 --class slacko {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/vmlinuz iso-scan/filename=$iso_path
        initrd (loop)/initrd.gz
    }
    return 0
}

function _entry_slackware {
    submenu $1 --id slackware $2 --class slackware {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/kernels/huge.s/bzImage vga=normal load_ramdisk=1 prompt_ramdisk=0 ro printk.time=0 nomodeset SLACK_KERNEL=huge.s iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd.img
    }
    return 0
}

function _entry_slax {
    submenu $1 --id slax $2 --class slax {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/slax/boot/vmlinuz vga=normal load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 slax.flags=perch,automount iso-scan/filename=$iso_path
        initrd (loop)/slax/boot/initrfs.img
    }
    return 0
}

function _entry_solus {
    submenu $1 --id solus $2 --class solus {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/kernel root=live:CDLABEL=SolusLiveBudgie ro rd.luks=0 rd.md=0 iso-scan/filename=$iso_path
        initrd (loop)/boot/initrd.img
    }
    return 0
}

function _entry_sparky {
    submenu $1 --id sparky $2 --class sparky {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/live/vmlinuz boot=live live-config live-media-path=/live iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_steam {
    submenu $1 --id steam $2 --class steamos {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/install.amd/vmlinuz preseed/file=/cdrom/default.preseed DEBCONF_DEBUG=developer preseed/file=/cdrom/default.preseed DEBCONF_DEBUG=developer desktop=steamos priority=high vga=788 iso-scan/filename=$iso_path
        initrd (loop)/install.amd/gtk/initrd.gz
    }
    return 0
}

function _entry_subgraph {
    submenu $1 --id subgraph $2 --class subgraph {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/live/vmlinuz boot=live noconfig=sudo username=user user-fullname=User hostname=subgraph union=overlay quiet splash apparmor=1 security=apparmor iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_tails {
    submenu $1 --id tails $2 --class tails {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/live/vmlinuz boot=live config live-media=removable nopersistence noprompt timezone=Etc/UTC block.events_dfl_poll_msecs=1000 splash noautologin module=Tails slab_nomerge slub_debug=FZP mce=0 vsyscall=none page_poison=1 mds=full,nosmt union=aufs iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_true {
    submenu $1 --id true $2 --class true {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/vmlinuz iso-scan/filename=$iso_path
        initrd (loop)/initrd.gz
    }
    return 0
}

function _entry_septor {
    submenu $1 --id septor $2 --class septor {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/live/vmlinuz boot=live components quiet splash keyboard-layouts=us iso-scan/filename=$iso_path
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_ubuntu {
    submenu $1 --id ubuntu $2 --class ubuntu {
        loopbackcfg $2
    }
    return 0
}

function _entry_ultimate {
    submenu $1 --id ultimate $2 --class ultimate {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/casper/vmlinuz file=/cdrom/preseed/ultimate.seed boot=casper iso-scan/filename=$iso_path --
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_voyager {
    submenu $1 --id voyager $2 --class voyager {
        loopbackcfg $2
    }
    return 0
}

function _entry_voyager9 {
    submenu $1 --id voyager $2 --class voyager {
        terminal_output gfxterm
        set iso_path=$2
        loopback aloop $iso_path
        insmod play
        play 960 440 1 0 4 440 1
        linux (aloop)/live/vmlinuz boot=live components locales=en_US.UTF-8 keyboard-layouts=us memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=normal iso-scan/filename=$iso_path
        initrd (aloop)/live/initrd.img
    }
    return 0
}

function _entry_zorin {
    submenu $1 --id zorin $2 --class zorin {
        loopbackcfg $2
    }
    return 0
}

function _entry_redobackup {
    submenu $1 --id redobackup $2 {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/casper/vmlinuz boot=casper vga=791 quiet splash iso-scan/filename=$iso_path --
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_rosa {
    submenu $1 --id rosa $2 --class rosa {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/isolinux/vmlinuz0 root=live:LABEL=ROSA.FRESH.KDE.R10.x86_64 ro rd.live.image quiet rootflags=rw,noatime rd.luks=0 rd.md=0 rd.dm=0 rhgb splash=silent logo.nologo iso-scan/filename=$iso_path
        initrd (loop)/isolinux/initrd0.img
    }
    return 0
}

function _entry_rescatux {
    submenu $1 --id rescatux $2 --class rescatux {
        loopbackcfg $2
    }
    return 0
}

function _entry_trisquel {
    submenu $1 --id trisquel $2 --class trisquel {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/casper/vmlinuz  file=/cdrom/preseed/trisquel.seed boot=casper iso-scan/filename=$iso_path
        initrd (loop)/casper/initrd
    }
    return 0
}

function _entry_wifislax {
    submenu $1 --id wifislax $2 --class wifislax {
        set iso_path=$2
        export iso_path
        search --set=root --file $iso_path
        loopback loop $iso_path
        linux (loop)/boot/vmlinuz livemedia=/dev/disk/by-uuid/$rootuuid:$iso_path kbd=us kbd tz=US/Pacific tz locale=en_US.utf8 locate xkb= xkb rw nop iso-scan/filename=$iso_path
        initrd (loop)/boot/initrd.xz
    }
    return 0
}



### PARTITION TOOLS ###

function _entry_aiosrt {
    submenu $1 --id aiosrt $2 --class hirens {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=$iso_path
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_bootrepairdisk {
    submenu $1 --id bootrepairdisk $2 --class repair {
        set iso_path=$2
        loopback loop $iso_path
        set gfxpayload=keep
        linux (loop)/casper/vmlinuz.efi iso-scan/filename=$iso_path file=/cdrom/preseed/lubuntu.seed boot=casper
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_clonezilla {
    submenu $1 --id clonezilla $2 --class clonezilla {
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/live/vmlinuz findiso=$iso_path boot=live union=overlay username=user config quiet noswap edd=on nomodeset noeject toram=filesystem.squashfs vga=normal nosplash
        initrd (loop)/live/initrd.img
    }
    return 0
}

function _entry_easyre {
    submenu $1 --id easyre $2 --class easyrecovery {
        set iso_path=$2
        set opts='map $iso_path (0xff);
                  map --hook;
                  chainloader (0xff);'
        linux16 /BOOT/GRUB/grub.exe --config-file=${opts}
    }
    return 0
}

function _entry_easyre_w8 {
    submenu $1 --id easyre_w8 $2 --class easyrecovery {
        set iso_path=$2
        loopback loop $iso_path
        probe -u $root --set=rootuuid
        set imgdevpath="/dev/disk/by-uuid/$rootuuid"
        linux (loop)/boot/bzImage rw root=/dev/null autologin sound=noconf kmap=en acpi=off noapic nolapic noacpi nomodeset @LXV3NSAtZTE0MTg1NzgwMzUgLXpiYmIxNjIwMjM3MTZmYTQ3ZTg2OGIwZTg0YWVlOGY4Y2Y3NDdhMTE5 
        initrd (loop)/boot/rootfs.gz
    }
    return 0
}

function _entry_easyre_w10 {
    submenu $1 --id easyre_w10 $2 --class easyrecovery {
        set iso_path=$2
        loopback loop $iso_path
    }
    return 0
}

function _entry_grub4dos {
    submenu $1 --id grub4dos $2 --class linux {
        set iso_path=$2
        set opts='map $iso_path (0xff);
                  map --hook;
                  chainloader (0xff);'
        linux16 /BOOT/GRUB/grub.exe --config-file=${opts}
    }
    return 0
}

function _entry_minitool {
    menuentry "MiniTool Partition Wizard Boot Disk" --id minitool $2 --class minitool {
        set gfxpayload=keep
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/casper/vmlinuz.efi ramdisk_size=409600 root=/dev/ram0 rw iso-scan/filename=$iso_path
        initrd (loop)/casper/tinycore.gz
    }
    return 0
}

function _entry_rdriveimage {
    menuentry "Start R-DriveImage" --id rdriveimage $2 --class r-drive-image {
        set gfxpayload=keep
        set iso_path=$2
        loopback loop $iso_path
        if [ "${grub_cpu}" == "x86_64" ]; then
           linux (loop,msdos3)/kernel64 vga=791 iso-scan/filename=$iso_path
           initrd (loop,msdos3)/lrfsbase.bin (loop,msdos3)/rm_scsi.b64 (loop,msdos3)/rm_pata.b64 (loop,msdos3)/rm_usb.b64 (loop,msdos3)/rm_pcard.b64 (loop,msdos3)/rm_video.b64 (loop,msdos3)/rm_other.b64 (loop,msdos3)/rootgui (loop,msdos3)/rmconfig.bin
        fi
        if [ "${grub_platform}" == "pc" ]; then
           linux16 /boot/grub/i386-pc/memdisk iso raw
           initrd16 $iso_path
        fi
    }
    return 0
}

function _entry_paragon {
    menuentry "Start Paragon-RCD in normal mode" --id paragon $2 --class paragon {
        set gfxpayload=keep
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/x86_64/loader/linux ramdisk_size=512000 ramdisk_blocksize=4096 vga=0x314 splash=silent panic=1
        initrd (loop)/boot/x86_64/loader/initrd
    }
    menuentry "Start Paragon-RCD in safe mode" --id paragon $2 --class paragon {
        set gfxpayload=keep
        set iso_path=$2
        loopback loop $iso_path
        linux (loop)/boot/x86_64/loader/linux ramdisk_size=512000 ramdisk_blocksize=4096 splash=silent ide=nodma apm=off noresume edd=off powersaved=off nohz=off highres=off processsor.max+cstate=1 vga=0x314 panic=1 nomodeset x11failsafe
        initrd (loop)/boot/x86_64/loader/initrd
    }
    return 0
}

function _entry_pmagic {
    submenu $1 --id pmagic $2 {
        set iso_path=$2
        set kernel="(loop)/pmagic/bzImage"
        set initrd="(loop)/pmagic/initrd.img (loop)/pmagic/fu.img (loop)/pmagic/m32.img"
        if cpuid -l; then
            set kernel="(loop)/pmagic/bzImage64"
            set initrd="(loop)/pmagic/initrd.img (loop)/pmagic/fu.img (loop)/pmagic/m64.img"
        fi
        loopback loop $iso_path
        linux $kernel edd=on vga=normal vmalloc=512MiB boot=live eject=no iso_filename=$iso_path load_ramdisk=1 --
        initrd $initrd
    }
    return 0
}

function _entry_systemrescuecd {
    submenu "${submenu_symbol}$1" --id systemrescuecd $2 --class systemrescuecd {
        set iso_path=$2; export iso_path
        regexp --set=1:archi  '.*/.*-(.+)\..*$' $iso_path
        loopback loop $iso_path
        probe -l (loop) --set=mlabel
        set kernel="(loop)/sysresccd/boot/x86_64/vmlinuz"
        if cpuid -l; then
            set kernel="(loop)/sysresccd/boot/x86_64/vmlinuz"
        fi
        set initrd="(loop)/sysresccd/boot/intel_ucode.img (loop)/sysresccd/boot/amd_ucode.img (loop)/sysresccd/boot/x86_64/sysresccd.img"
        set cmdline="archisobasedir=sysresccd archisodevice=/dev/disk/by-label/$mlabel setkmap=us rootpass=rescue"
        menuentry "System Rescue CD (default options)" --id boot --class systemrescuecd {
            loopback loop $iso_path
            linux $kernel isoloop=$iso_path $cmdline
            initrd $initrd
        }
        menuentry "System Rescue CD (dostartx)" --class systemrescuecd {
            loopback loop $iso_path
            linux $kernel isoloop=$iso_path $cmdline dostartx
            initrd $initrd
        }
        menuentry "System Rescue CD (docache)" --class systemrescuecd {
            loopback loop $iso_path
            linux $kernel isoloop=$iso_path $cmdline docache
            initrd $initrd
        }
        menuentry "System Rescue CD (serial)" --class systemrescuecd {
            loopback loop $iso_path
            linux $kernel isoloop=$iso_path $cmdline console=tty0 console=ttyS0,115200n8
            initrd $initrd
        }
        menuentry "MEMTEST: Memory test using Memtest86+" {
            loopback loop $iso_path
            linux16 (loop)/bootdisk/memtestp
        }
        menuentry "NTPASSWD: Reset or edit Windows passwords" {
            loopback loop $iso_path
            linux16 (loop)/ntpasswd/vmlinuz rw vga=1
            initrd16 (loop)/ntpasswd/initrd.cgz (loop)/ntpasswd/scsi.cgz
        }
        menuentry "SGD: Super Grub2 Disk" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy raw
            initrd16 (loop)/bootdisk/grubdisk.img
        }
        menuentry "FREEDOS: Clone of the MSDOS Operating System" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy
            initrd16 (loop)/bootdisk/freedos.img
        }
        menuentry "NETBOOT: Boot from the network" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/netboot
        }
        menuentry "HDT: recent hardware diagnostics tool" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy
            initrd16 (loop)/bootdisk/hdt.img
        }
        menuentry "AIDA: old hardware diagnostics tool" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy
            initrd16 (loop)/bootdisk/aida.img
        }
        menuentry "GAG: Graphical Boot Manager" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy
            initrd16 (loop)/bootdisk/gag.img
        }
        menuentry "DBAN: erase all data from the disk" {
            loopback loop $iso_path
            linux16 (loop)/bootdisk/dban.bzi nuke="dwipe" silent
        }
        menuentry "MHDD: Low-level Hard Drive diagnostic tool" {
            loopback loop $iso_path
            linux16 (loop)/isolinux/memdisk floppy
            initrd16 (loop)/bootdisk/mhdd.img
        }
    }
    return 0
}



### ANTIVIRUS LIVE ISO ###

function _entry_bitdefender {
    submenu $1 --id bitdefender $2 --class icon-bit {
        set iso_path=$2
        loopback loop "($isodir)$iso_path"
        set root=loop
        insmod video_bochs
        insmod video_cirrus
        echo "Loading..."
        set SQUASHFILE="/rescue/livecd.squashfs"
        set kopts_common="root=/dev/ram0 real_root=/dev/loop0 loop=${SQUASHFILE} cdroot_marker=${SQUASHFILE} initrd udev cdroot scandelay=10"
        if [ "${grub_platform}" == "efi" ]; then
            linuxefi /boot/kernel.x86_64-efi ${kopts_common} lang=en iso-scan/filename=$iso_path
            initrdefi /boot/initfs.x86_64-efi
        fi
        if [ "${grub_platform}" == "pc" ]; then
            linux /boot/kernel.i386-pc ${kopts_common} lang=en iso-scan/filename=$iso_path
            initrd /boot/initfs.i386-pc
        fi
    }
    return 0
}

function _entry_avira {
    menuentry "Avira Rescue System" --id avira $2 --class avira {
        set iso_path=$2
        export iso_path
        set gfxpayload=keep
        search --set=root --file $iso_path
        loopback loop $iso_path
        linux (loop)/casper/vmlinuz file=/cdrom/preseed/ubuntu.seed boot=casper -- debian-installer/language=en console-setup/layoutcode=en iso-scan/filename=${iso_path}
        initrd (loop)/casper/initrd.lz
    }
    return 0
}

function _entry_kaspersky {
    menuentry "Kaspersky Rescue Disk 18" --id kaspersky $2 --class kav {
        set iso_path=/DATA/krd.iso
        export iso_path
        search --set=root --file $iso_path
        loopback loop $iso_path
        if cpuid -l; then set _kernel="k-x86_64"; else set _kernel_="k-x86"; fi
        linux (loop)/boot/grub/${_kernel} net.ifnames=0 lang=en dostartx isoloop=krd.iso
        initrd (loop)/boot/grub/initrd.xz
    }
    return 0
}
