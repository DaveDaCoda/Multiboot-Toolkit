
function setenv { set "$1"="$2"; export "$1"; }

search.fs_label rEFInd isodir

setenv images "/ISO"
setenv imagess "(${isodir})/ISO"

configfile "${prefix}/smartfinn.cfg"

function _generate_entries {
    for file in ${images}/*.iso ${images}/*.ISO; do
        if [ ! -f "${file}" ]; then continue; fi

        regexp --set=1:filepath '(/.+)$' "$file"
        regexp --set=1:filename '^.*/(.+)$' "$file"

        if regexp "alpine" "${filename}"; then
            _entry_alpine ${filename} ${filepath}
        #elif regexp "android" "${filename}"; then
            #_entry_android ${filename} ${filepath}
        elif regexp "antergos" "${filename}"; then
            _entry_antergos ${filename} ${filepath}
        elif regexp "(antix|antiX)" "${filename}"; then
            _entry_antix ${filename} ${filepath}
        elif regexp "apricity" "${filename}"; then
            _entry_apricity ${filename} ${filepath}
        elif regexp "archbang" "${filename}"; then
            _entry_archlabs ${filename} ${filepath}
        elif regexp "archlabs" "${filename}"; then
            _entry_archlabs ${filename} ${filepath}
        elif regexp "archlinux" "${filename}"; then
            _entry_archlinux ${filename} ${filepath}
        elif regexp "archman" "${filename}"; then
            _entry_archman ${filename} ${filepath}
        elif regexp "arco" "${filename}"; then
            _entry_arco ${filename} ${filepath}
        elif regexp "avl" "${filename}"; then
            _entry_avl ${filename} ${filepath}
        elif regexp "bluestar" "${filename}"; then
            _entry_bluestar ${filename} ${filepath}
        elif regexp "bbqlinux" "${filename}"; then
            _entry_bbqlinux ${filename} ${filepath}
        elif regexp "bodhi" "${filename}"; then
            _entry_bodhi ${filename} ${filepath}
        elif regexp "(centos|CentOS)" "${filename}"; then
            _entry_centos ${filename} ${filepath}
        elif regexp "cub" "${filename}"; then
            _entry_cub ${filename} ${filepath}
        elif regexp "cosmic" "${filename}"; then
            _entry_cosmic ${filename} ${filepath}
        elif regexp "debian" "${filename}"; then
            _entry_debian ${filename} ${filepath}
        elif regexp "manjaro" "${filename}"; then
            _entry_manjaro ${filename} ${filepath}
        elif regexp "netrunner" "${filename}"; then
            _entry_netrunner ${filename} ${filepath}
        elif regexp "deepin" "${filename}"; then
            _entry_deepin ${filename} ${filepath}
        elif regexp "deepin_live" "${filename}"; then
            _entry_deepin_live ${filename} ${filepath}
        elif regexp "(discreete|Discreete)" "${filename}"; then
            _entry_discreete ${filename} ${filepath}
        elif regexp "elementaryos" "${filename}"; then
            _entry_elementaryos ${filename} ${filepath}
        elif regexp "(Fedora|fedora|korora)" "${filename}"; then
            _entry_fedora ${filename} ${filepath}
        elif regexp "(gecko|Gecko)" "${filename}"; then
            _entry_gecko ${filename} ${filepath}
        elif regexp "kodachi" "${filename}"; then
            _entry_kodachi ${filename} ${filepath}
        elif regexp "(kaos|KaOS)" "${filename}"; then
            _entry_kaos ${filename} ${filepath}
        elif regexp "knoppix" "${filename}"; then
            _entry_knoppix ${filename} ${filepath}
        elif regexp "linuxbbq" "${filename}"; then
            _entry_linuxbbq ${filename} ${filepath}
        elif regexp "linux_lite" "${filename}"; then
            _entry_linux_lite ${filename} ${filepath}
        elif regexp "linuxmint" "${filename}"; then
            _entry_linuxmint ${filename} ${filepath}
        elif regexp "(mx-|MX-)" "${filename}"; then
            _entry_mx ${filename} ${filepath}
        elif regexp "neon" "${filename}"; then
            _entry_neon ${filename} ${filepath}
        elif regexp "(neptune|Neptune)" "${filename}"; then
            _entry_neptune ${filename} ${filepath}
        elif regexp "(netrunner|Netrunner)" "${filename}"; then
            _entry_netrunner ${filename} ${filepath}
        #elif regexp "(pclinux|Pclinux)" "${filename}"; then
            #_entry_pclinux ${filename} ${filepath}
        elif regexp "(Pepper|pepper)" "${filename}"; then
            _entry_pepper ${filename} ${filepath}
        elif regexp "(pinguy|Pinguy)" "${filename}"; then
            _entry_pinguyos ${filename} ${filepath}
        elif regexp "(pop-os|Pop-OS)" "${filename}"; then
            _entry_pop ${filename} ${filepath}
        elif regexp "(pup|Pup)" "${filename}"; then
            _entry_pup ${filename} ${filepath}
        elif regexp "(Redcore|redcore)" "${filename}"; then
            _entry_redcore ${filename} ${filepath}
        elif regexp "(sabayon|Sabayon)" "${filename}"; then
            _entry_sabayon ${filename} ${filepath}
        elif regexp "slackware" "${filename}"; then
            _entry_slackware ${filename} ${filepath}
        elif regexp "(Solus|solus)" "${filename}"; then
            _entry_solus ${filename} ${filepath}
        #elif regexp "(Sparky|sparky)" "${filename}"; then
            #_entry_sparky ${filename} ${filepath}
        elif regexp "(Steam|steam)" "${filename}"; then
            _entry_steam ${filename} ${filepath}
        elif regexp "buntu" "${filename}"; then
            _entry_ubuntu ${filename} ${filepath}
        elif regexp "ultimate" "${filename}"; then
            _entry_ultimate ${filename} ${filepath}
        elif regexp "(Voyager|voyager)" "${filename}"; then
            _entry_voyager ${filename} ${filepath}
        elif regexp "(zorin|Zorin)" "${filename}"; then
            _entry_zorin ${filename} ${filepath}
        elif regexp "(ROSA|rosa|Rosa)" "${filename}"; then
            _entry_rosa ${filename} ${filepath}
        elif regexp "rescatux" "${filename}"; then
            _entry_rescatux ${filename} ${filepath}
        elif regexp "trisquel" "${filename}"; then
            _entry_trisquel ${filename} ${filepath}
        fi
    done
}

function _generate_entriess {
    for file in ${imagess}/*.iso ${imagess}/*.ISO; do
        if [ ! -f "${file}" ]; then continue; fi

        regexp --set=1:filepath '(/.+)$' "$file"
        regexp --set=1:filename '^.*/(.+)$' "$file"

        if regexp "(Fedora|fedora|korora)" "${filename}"; then
            _entry_fedora ${filename} ${filepath}
        elif regexp "openSUSE-Leap" "${filename}"; then
            _entry_opensuse_leap ${filename} ${filepath}
        elif regexp "openSUSE-Tumbleweed" "${filename}"; then
            _entry_opensuse_tumblew ${filename} ${filepath}
        fi
    done
}


menuentry "return to main menu" --class arrow-left {
    echo "return to main menu"
    configfile "${prefix}/main.cfg"
}

_generate_entries
_generate_entriess

if [ -e "/ISO_Extract/android-x86/ramdisk.img" ]; then
menuentry "Android OS (extracted)" --class android {
    if [ -e "/ISO_Extract/android-x86/system.sfs" ]; then
        search --file --no-floppy --set=root /ISO_Extract/android-x86/system.sfs
    fi
    if [ -e "/ISO_Extract/android-x86/system.img" ]; then
        search --file --no-floppy --set=root /ISO_Extract/android-x86/system.img
    fi
    linux /ISO_Extract/android-x86/kernel root=/dev/ram0 androidboot.hardware=android_x86 quiet SRC= DATA=
    initrd /ISO_Extract/android-x86/initrd.img
}
fi

if [ -e "/ISO_Extract/PhoenixOS/initrd.img" ]; then
menuentry "Phoenix OS - Live Mode (extracted)" --class phoenix {
    search --file --no-floppy --set=root /ISO_Extract/PhoenixOS/kernel
    linux /ISO_Extract/PhoenixOS/kernel root=/dev/ram0 androidboot.hardware=android_x86 vga=788 DATA=/ISO_Extract/PhoenixOS
    initrd /ISO_Extract/PhoenixOS/initrd.img
}
menuentry "Phoenix OS - Installer (extracted)" --class phoenix {
    search --file --no-floppy --set=root /ISO_Extract/PhoenixOS/system.sfs
    linux /ISO_Extract/PhoenixOS/kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug INSTALL=1 DEBUG=
    initrd /ISO_Extract/PhoenixOS/initrd.img
}
fi

if [ -e "/ISO_Extract/remixOS/initrd.img" ]; then
menuentry "Remix OS - Resident mode (Extracted)" --class remixos {
    insmod ntfs
    insmod exfat
    savedefault
    search --file --no-floppy --set=root /ISO_Extract/remixOS/kernel
    linux /ISO_Extract/RemixOS/kernel root=/dev/ram0 androidboot.selinux=permissive SERIAL=random logo.showlogo=1 DATA=/ISO_Extract/RemixOS USB_DATA_PARTITION=1
    initrd /ISO_Extract/RemixOS/initrd.img
}
menuentry "Remix OS - Guest mode (Extracted)" --class remixos {
    search --file --no-floppy --set=root /ISO_Extract/remixOS/kernel
    linux /ISO_Extract/remixOS/kernel root=/dev/ram0 androidboot.selinux=permissive SERIAL=random logo.showlogo=1 REMOUNT_RW=0 DATA=/ISO_Extract/RemixOS DATA_IN_MEM=1
    initrd /ISO_Extract/remixOS/initrd.img
}
fi

if [ -e "/ISO_Extract/PrimeOS/initrd.img" ]; then
menuentry "PrimeOS - Live mode (Extracted)" --class primeos {
    set live=Live
    set debug_mode="Live DEBUG mode"
    setparams 'Android-x86 Live' 'Live' 'quite'
    shift 2
    set root=$android
    search --file --no-floppy --set=root /ISO_Extract/PrimeOS/system.sfs
    linux /ISO_Extract/PrimeOS/kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug $src $@ SRC= DATA= 
    initrd /ISO_Extract/PrimeOS/initrd.img
}
menuentry "PrimeOS - Installation mode (Extracted)" --class primeos {
    setparams 'Android-x86 Installation' 'Installation' 'INSTALL=1'
    shift 2
    set root=$android
    search --file --no-floppy --set=root /ISO_Extract/PrimeOS/system.sfs
    linux /ISO_Extract/PrimeOS/kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug $src $@ SRC= DATA= 
    initrd /ISO_Extract/PrimeOS/initrd.img
}
fi

menuentry "return to main menu" --class arrow-left {
    echo "return to main menu"
    configfile "${prefix}/main.cfg"
}
